version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: lndx-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: lndx_user
      POSTGRES_PASSWORD: lndx_pass
      POSTGRES_DB: lndx_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    networks:
      - lndx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lndx_user -d lndx_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: lndx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - lndx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch (可选，用于高级搜索)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lndx-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=lndx-es-node
      - cluster.name=lndx-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - lndx-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 后端应用
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.postgresql
    container_name: lndx-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9090:9090"  # 监控端口
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://lndx_user:lndx_pass@postgres:5432/lndx_db?schema=public
      - JWT_SECRET=lndx_super_secret_jwt_key_2025
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ENABLE_METRICS=true
      - SEARCH_LANGUAGE=simple
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - lndx-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 5

  # pgAdmin (PostgreSQL管理界面)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lndx-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lndx.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - lndx-network

  # Grafana监控 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: lndx-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - lndx-network

  # Prometheus监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: lndx-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lndx-network

  # Nginx代理
  nginx:
    image: nginx:alpine
    container_name: lndx-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/var/www/html  # 前端静态文件
    depends_on:
      - backend
    networks:
      - lndx-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  lndx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

