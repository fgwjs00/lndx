generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  phone              String         @unique
  email              String?        @unique
  password           String
  realName           String
  avatar             String?
  role               UserRole
  isActive           Boolean        @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  createdCourses     Course[]       @relation("CreatedBy")
  createdEnrollments Enrollment[]   @relation("CreatedBy")
  operationLogs      OperationLog[]
  createdStudents    Student[]      @relation("CreatedBy")
  studentProfile     Student?
  teacherProfile     Teacher?

  @@map("users")
}

model Student {
  id                String   @id @default(cuid())
  studentCode       String   @unique
  realName          String
  gender            Gender
  age               Int
  birthday          DateTime
  idCardNumber      String   @unique
  idCardAddress     String
  contactPhone      String
  photo             String? // 个人照片URL
  idCardFront       String?
  idCardBack        String?
  currentAddress    String
  emergencyContact  String
  emergencyPhone    String
  emergencyRelation String
  healthStatus      String?
  medicalHistory    String?
  allergies         String?
  interests         String[] @default([])
  tags              String[] @default([])
  remarks           String?
  isActive          Boolean  @default(true)

  // 年级管理字段
  currentGrade       String? // 当前年级：一年级、二年级、三年级
  enrollmentYear     Int? // 入学年份
  enrollmentSemester String? // 入学学期
  graduationStatus   String    @default("IN_PROGRESS") // 毕业状态：IN_PROGRESS, GRADUATED, ARCHIVED
  graduationDate     DateTime? // 毕业时间
  academicStatus     String    @default("ACTIVE") // 学籍状态：ACTIVE, SUSPENDED, GRADUATED

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String?      @unique
  createdBy   String
  attendances Attendance[]
  enrollments Enrollment[]
  creator     User         @relation("CreatedBy", fields: [createdBy], references: [id])
  user        User?        @relation(fields: [userId], references: [id])

  @@index([realName, idCardNumber, contactPhone])
  @@index([graduationStatus, academicStatus])
  @@index([currentGrade, enrollmentYear])
  @@map("students")
}

model Teacher {
  id           String          @id @default(uuid())
  teacherCode  String          @unique
  realName     String
  gender       Gender
  phone        String          @unique
  email        String?         @unique
  specialties  String[]        @default([])
  experience   Int
  level        String?
  certificates String[]        @default([])
  isActive     Boolean         @default(true)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  userId       String          @unique
  courses      CourseTeacher[]
  user         User            @relation(fields: [userId], references: [id])

  @@map("teachers")
}

model Course {
  id                String          @id @default(cuid())
  courseCode        String?         @unique
  name              String
  description       String?
  category          String
  level             String
  duration          Int
  maxStudents       Int
  price             Decimal?        @db.Decimal(10, 2)
  hasAgeRestriction Boolean         @default(false)
  minAge            Int?
  maxAge            Int?
  ageDescription    String?
  tags              String[]        @default([])
  keywords          String[]        @default([])
  timeSlots         Json
  status            CourseStatus    @default(DRAFT)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String
  credits           Int?
  endDate           DateTime?
  startDate         DateTime?
  location          String?
  semester          String?
  teacher           String?
  attendances       Attendance[]
  teachers          CourseTeacher[]
  creator           User            @relation("CreatedBy", fields: [createdBy], references: [id])
  enrollments       Enrollment[]

  @@index([name, category, level])
  @@map("courses")
}

model CourseTeacher {
  id        String   @id @default(cuid())
  courseId  String
  teacherId String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher   Teacher  @relation(fields: [teacherId], references: [id])

  @@unique([courseId, teacherId])
  @@map("course_teachers")
}

model Enrollment {
  id               String           @id @default(cuid())
  enrollmentCode   String           @unique
  studentId        String
  courseId         String
  status           EnrollmentStatus @default(PENDING)
  enrollmentDate   DateTime         @default(now())
  approvedAt       DateTime?
  approvedBy       String?
  cancelledAt      DateTime?
  cancelReason     String?
  remarks          String?
  paymentStatus    PaymentStatus    @default(UNPAID)
  paymentAmount    Decimal?         @db.Decimal(10, 2)
  paidAt           DateTime?
  paymentMethod    String?
  paymentReference String?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdBy        String
  insuranceEnd     DateTime?
  insuranceStart   DateTime?
  course           Course           @relation(fields: [courseId], references: [id])
  creator          User             @relation("CreatedBy", fields: [createdBy], references: [id])
  student          Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Attendance {
  id             String           @id @default(cuid())
  studentId      String
  courseId       String
  attendanceDate DateTime
  status         AttendanceStatus @default(ABSENT)
  method         AttendanceMethod @default(MANUAL)
  checkInTime    DateTime?
  isLate         Boolean          @default(false)
  lateMinutes    Int?
  faceImageUrl   String?
  faceScore      Float?
  locationData   Json?
  deviceInfo     Json?
  remarks        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  course         Course           @relation(fields: [courseId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])

  @@index([attendanceDate, status])
  @@index([studentId, courseId])
  @@map("attendances")
}

model OperationLog {
  id            String   @id @default(uuid())
  userId        String
  action        String
  resource      String
  resourceId    String?
  details       Json?
  ip            String?
  userAgent     String?
  requestUrl    String?
  requestMethod String?
  success       Boolean  @default(true)
  error         String?
  duration      Int?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([action, resource])
  @@map("operation_logs")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  dataType    String   @default("string")
  isSystem    Boolean  @default(false)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

model FileUpload {
  id           String    @id @default(cuid())
  originalName String
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  fileType     String
  metadata     Json?
  uploadedBy   String?
  isTemp       Boolean   @default(false)
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())

  @@index([uploadedBy, createdAt])
  @@index([isTemp, expiresAt])
  @@map("file_uploads")
}

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  SUSPENDED
  CANCELLED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEAVE
}

enum AttendanceMethod {
  FACE_RECOGNITION
  MANUAL
  QR_CODE
  CARD
}
